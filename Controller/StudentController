package com.jsp.StudentManagementSystem.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.jsp.StudentManagementSystem.dto.MessageData;
import com.jsp.StudentManagementSystem.dto.StudentRequest;
import com.jsp.StudentManagementSystem.dto.StudentResponse;
import com.jsp.StudentManagementSystem.entity.Student;
import com.jsp.StudentManagementSystem.service.StudentService;
import com.jsp.StudentManagementSystem.util.ResponseStructure;

import jakarta.mail.MessagingException;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/students")
@CrossOrigin
public class StudentController {
 
	@Autowired
	private StudentService service;
	
//	@RequestMapping(method = RequestMethod.POST,value = "student")
	@PostMapping 
	public ResponseEntity<ResponseStructure<StudentResponse>> saveStudent(@RequestBody @Valid  StudentRequest studentresRequest){
		
		return service.saveStudent(studentresRequest);
	}
	
	@PutMapping("/{studentId}")
	public ResponseEntity<ResponseStructure<StudentResponse>> updateStudent(@RequestBody StudentRequest studentRequest, @PathVariable int studentId){
		//here used @pathvariable instead of @requestparam
		return service.updateStudent(studentRequest, studentId);
	}
	
	@DeleteMapping("/{studentId}")
	public ResponseEntity<ResponseStructure<StudentResponse>> deleteStudent(@PathVariable int studentId ){
		return  service.deleteStudent(studentId);
		
	}
	@GetMapping("/{studentId}")
	public ResponseEntity<ResponseStructure<StudentResponse>>  findStudent(@PathVariable int studentId)
	{
		return  service.findStudent(studentId);
		
	}
	@GetMapping()
	public ResponseEntity<ResponseStructure<List<Student>>> findAllStudent()
	{
		return service.findAllStudent();
	}
//	@GetMapping
//	public ResponseEntity<List<Student>> GetAllStudents(){
//		return service.findAllStudents();
//	}
//	@GetMapping("/student/{studentEmail}")
	@GetMapping(params = "studentEmail")
	public ResponseEntity<ResponseStructure<StudentResponse>> findByEmail(@RequestParam String  studentEmail)
	{
		return service.findByEmail(studentEmail);
	}
	@GetMapping(params = "studentGrade")
	public ResponseEntity<ResponseStructure<List<String>>> getAllEmailsByGrade(@RequestParam String studentGrade)
	{
		return service.getAllEmailsByGrade(studentGrade);
	}
	
//	@PostMapping("/extract/file/{file}") //to specify the endpoints
	@PostMapping("/extract")
	public ResponseEntity<String> ExtractDataFromExcel(@RequestParam MultipartFile file)throws IOException
	{
		return service.extractDataFromExcel(file);
	}
	
	@PostMapping("/write/excel")
	public ResponseEntity<String> writeToExcel(@RequestParam String filepath)throws IOException
	{
		return service.writeToExcel(filepath);
	}
	
//	@PostMapping("/send/mail")
	@PostMapping("/mail")	
	public ResponseEntity<String> sendMail(@RequestBody MessageData messageData)
	{
		return service.sendMail(messageData);
	}
	@PostMapping("/mime-message")
	public ResponseEntity<String> sendMimeMessage(@RequestBody MessageData messageData) throws MessagingException
	{
		return service.sendMimeMessage(messageData);
	}
	@PostMapping("/extractcsv")
	public ResponseEntity<ResponseStructure<List<StudentResponse>>> extractDatafromCSV(@RequestParam MultipartFile file)throws IOException{
		return service.extractDatafromCSV(file);
	}
}
//operation should be done by service method 






















