package com.jsp.StudentManagementSystem.serviceimpl;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.SecurityProperties.User;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
//import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.jsp.StudentManagementSystem.dto.MessageData;
import com.jsp.StudentManagementSystem.dto.StudentRequest;
import com.jsp.StudentManagementSystem.dto.StudentResponse;
import com.jsp.StudentManagementSystem.entity.Student;
import com.jsp.StudentManagementSystem.exception.StudentNotFoundByEmailException;
import com.jsp.StudentManagementSystem.exception.StudentNotFoundByIdException;
import com.jsp.StudentManagementSystem.repository.StudentRepo;
import com.jsp.StudentManagementSystem.service.StudentService;
import com.jsp.StudentManagementSystem.util.ResponseStructure;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;

@Service
public class studentServiceImpl implements StudentService {
	@Autowired
	private StudentRepo repo;
	
	@Autowired
	private JavaMailSender javaMailSender;
	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> saveStudent(StudentRequest studentRequest) {
		Student student = new Student();
		student.setStudentName(studentRequest.getStudentName());
		student.setStudentEmail(studentRequest.getStudentEmail());
		student.setStudentPhno(studentRequest.getStudentPhno());
		student.setStudentGrade(studentRequest.getStudentGrade());
		student.setStudentPassword(studentRequest.getStudentPassword());

		Student student2 = repo.save(student);

		StudentResponse response = new StudentResponse();
		
		response.setStudentId(student2.getStudentId());
		response.setStudentName(student2.getStudentName());
		response.setStudentGrade(student2.getStudentGrade());

		ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
		structure.setStatus(HttpStatus.CREATED.value());
		structure.setMessage("Student data saved successfully!");
		structure.setData(response);
		return new ResponseEntity<ResponseStructure<StudentResponse>>(structure, HttpStatus.CREATED);
	}

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> updateStudent(StudentRequest studentRequest,
			int studentId) {
		Optional<Student> optional = repo.findById(studentId);
		if (optional.isPresent()) {

			Student student = new Student();
			student.setStudentId(studentId);
			student.setStudentName(studentRequest.getStudentName());
			student.setStudentEmail(studentRequest.getStudentEmail());
			student.setStudentGrade(studentRequest.getStudentGrade());
			student.setStudentPhno(studentRequest.getStudentPhno());

			Student student2 = optional.get();

			Student student3 = repo.save(student);

			StudentResponse response = new StudentResponse();
			response.setStudentId(student.getStudentId());
			response.setStudentName(student.getStudentName());
			response.setStudentGrade(student.getStudentGrade());

			ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
			structure.setStatus(HttpStatus.OK.value());
			structure.setMessage("Student data updated successfully!");
			structure.setData(response);
			return new ResponseEntity<ResponseStructure<StudentResponse>>(structure, HttpStatus.OK);

		} else {

			return null;
		}

	}

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> deleteStudent(int studentId) {
		Optional<Student> optional = repo.findById(studentId);
		if (optional.isPresent()) {
			Student student4 = optional.get();

			repo.deleteById(studentId);

			StudentResponse response = new StudentResponse();
			response.setStudentId(student4.getStudentId());
			response.setStudentName(student4.getStudentName());
			response.setStudentGrade(student4.getStudentGrade());

			ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
			structure.setStatus(HttpStatus.OK.value());
			structure.setMessage("Student data deleted successfully!");

			structure.setData(response);

			return new ResponseEntity<ResponseStructure<StudentResponse>>(structure, HttpStatus.OK);

		} else {

			throw new StudentNotFoundByIdException("Failed to delete the student data");
		}

	}

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> findStudent(int studentId) {

		Optional<Student> optional = repo.findById(studentId);
		if (optional.isPresent()) {
			Student student6 = optional.get();

			StudentResponse response = new StudentResponse();
			response.setStudentId(student6.getStudentId());
			response.setStudentName(student6.getStudentName());
			response.setStudentGrade(student6.getStudentGrade());

			ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
			structure.setStatus(HttpStatus.OK.value());
			structure.setMessage("Student data found successfully!");
			structure.setData(response);

			return new ResponseEntity<ResponseStructure<StudentResponse>>(structure, HttpStatus.ACCEPTED);

		} else {

			return null;
		}

	}

	@Override
	public ResponseEntity<ResponseStructure<List<Student>>> findAllStudent() {
		List<Student> students = repo.findAll();
		ResponseStructure<List<Student>> structure = new ResponseStructure<List<Student>>();
		structure.setStatus(HttpStatus.OK.value());
		structure.setMessage("Student data found all  successfully!");
		structure.setData(students);
		return new ResponseEntity<ResponseStructure<List<Student>>>(structure, HttpStatus.OK);
	}

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> findByEmail(String studentEmail) {
		Student student = repo.findByStudentEmail(studentEmail);
		if (student != null) {
			StudentResponse response = new StudentResponse();
			response.setStudentId(student.getStudentId());
			response.setStudentName(student.getStudentName());
			response.setStudentGrade(student.getStudentGrade());

			ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
			structure.setStatus(HttpStatus.FOUND.value());
			structure.setMessage("Student Found based on Email");
			structure.setData(response);
			return new ResponseEntity<ResponseStructure<StudentResponse>>(structure, HttpStatus.FOUND);
		} else {

			throw new StudentNotFoundByEmailException("Failed to find  the student data by Email");
		}

	}

	@Override
	public ResponseEntity<ResponseStructure<List<String>>> getAllEmailsByGrade(String grade) {
		List<String> student = repo.getAllEmailsByGrade(grade);
		if (student != null) {
			ResponseStructure<List<String>> structure = new ResponseStructure<List<String>>();
			structure.setStatus(HttpStatus.FOUND.value());
			structure.setMessage("Student Found based on Grade");
			structure.setData(student);
			return new ResponseEntity<ResponseStructure<List<String>>>(structure, HttpStatus.FOUND);

		} else {
			throw new StudentNotFoundByEmailException("Failed to find  the student data by Email");
		}

	}

	@Override
	public ResponseEntity<String> extractDataFromExcel(MultipartFile file) throws IOException {
		XSSFWorkbook workbook = new XSSFWorkbook(file.getInputStream());
		//how 
		for (Sheet sheet : workbook) {
			for (Row row : sheet) {
				if (row.getRowNum()> 0) {
					if (row != null) {
						String name = row.getCell(0).getStringCellValue();
						String email = row.getCell(1).getStringCellValue();
						long phoneNumber = (long) row.getCell(2).getNumericCellValue();
						String grade = row.getCell(3).getStringCellValue();
						String password = row.getCell(4).getStringCellValue();

						System.out.println(name + ", " + email + ", " + phoneNumber + ", " + grade + ", " + password);
					
					//How to store the data from excel sheet
						 Student student=new Student();
						 student.setStudentName(name);
						 student.setStudentEmail(email);
						 student.setStudentGrade(grade);
						 student.setStudentPhno(phoneNumber);
						 student.setStudentPassword(password);
						 
						repo.save(student);
					}
				}
			}
		}
		workbook.close();
		return null;
	}
//To send the data from database to Excel sheet 
	@Override
	public ResponseEntity<String> writeToExcel(String filePath)throws IOException {
	
		List<Student> users=repo.findAll();
		
		XSSFWorkbook workbook=new XSSFWorkbook();
		
		XSSFSheet sheet=workbook.createSheet();
		
		Row header= sheet.createRow(0);
		header.createCell(0).setCellValue("studentId");
		header.createCell(1).setCellValue("studentName");
		header.createCell(2).setCellValue("studentEmail");
		header.createCell(3).setCellValue("studentPhno");
		header.createCell(4).setCellValue("studentGrade");
		header.createCell(5).setCellValue("studentPassword");
		
		int rowNum=1;
		for(Student student:users)
		{
			Row row=sheet.createRow(rowNum+1);
			row.createCell(0).setCellValue(student.getStudentId());
			row.createCell(1).setCellValue(student.getStudentName());
			row.createCell(2).setCellValue(student.getStudentEmail());
			row.createCell(3).setCellValue(student.getStudentPhno());
			row.createCell(4).setCellValue(student.getStudentGrade());
			row.createCell(5).setCellValue(student.getStudentPassword());
		}
		
		FileOutputStream outputStream=new FileOutputStream(filePath);
		workbook.write(outputStream);
		workbook.close();
		
		return new ResponseEntity<String>("Data transfered to Excel sheet !!", HttpStatus.OK);
	}

	@Override
	public ResponseEntity<String> sendMail(MessageData messageData) {
	 SimpleMailMessage message=new  SimpleMailMessage();
	 message.setTo(messageData.getTo());
	 message.setSubject(messageData.getSubject());
	 message.setText(messageData.getText()+"\n\n Thanks and Warm Regadrs"+"\n"+messageData.getSendName()+"\n"+messageData.getSendAddress());
	 message.setSentDate(new Date());
		 
	 javaMailSender.send(message);
	return new ResponseEntity<String>("Mail send successfully", HttpStatus.OK);
	}

	@Override
	public ResponseEntity<String> sendMimeMessage(MessageData messageData) throws MessagingException {
		 
		 MimeMessage mime=javaMailSender.createMimeMessage();
		 MimeMessageHelper message=new MimeMessageHelper(mime, false);
		 
		 message.setTo(messageData.getTo());
		 message.setSubject(messageData.getSubject());
		 String emailBody=messageData.getText()+
		"<h4>Thanks and Warm Regards</h4>"+
		 "<h5>"+messageData.getSendName()+messageData.getSendAddress()+"</h5>"+
		 "<img src=\"https://www.jspiders.com/_nuxt/img/logo_jspiders.3b552d0.png\" alt=\"\" width=\"250\"/>";
		 
		message.setText(emailBody,true);
		message.setSentDate(new Date());
		
		javaMailSender.send(mime);
		
		return new ResponseEntity<String>("Mail sent successfully",HttpStatus.OK);
	}

	@Override
	public ResponseEntity<ResponseStructure<List<StudentResponse>>> extractDatafromCSV(MultipartFile file)
			throws IOException {
		 BufferedReader fileReader = new BufferedReader(new InputStreamReader(file.getInputStream(), "UTF-8"));
		 CSVParser csvParser = new CSVParser(fileReader, CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreHeaderCase().withTrim());
		 Iterable<CSVRecord> csvRecords= csvParser.getRecords();
		 List<StudentResponse> studentResponses=new ArrayList<StudentResponse>();
		 for(CSVRecord csvRecord:csvRecords)
		 {
			 String name=csvRecord.get("studentName");
			 String email=csvRecord.get("studentEmail");
			 long phoneNumber =Long.parseLong(csvRecord.get("studentPhno"));
			 String grade=csvRecord.get("studentGrade");
			 String password= csvRecord.get("studentPassword");
			
			 
			 System.out.println(name+","+phoneNumber+","+password+","+ email+","+ grade);
			 
			 Student student=new Student();
			 student.setStudentPhno(phoneNumber);
			 student.setStudentGrade(grade);
			 student.setStudentName(name);
			 student.setStudentEmail(email);

			 student.setStudentPassword(password);
			
			
			
			 
			 student=repo.save(student);
			 
			 StudentResponse studentResponse=new StudentResponse();
			 studentResponse.setStudentId(student.getStudentId());
			 studentResponse.setStudentName(student.getStudentName());
			 studentResponse.setStudentGrade(student.getStudentGrade());
			
			 studentResponses.add(studentResponse);
	
		 }
		 	ResponseStructure<List<StudentResponse>> structure =new ResponseStructure<List<StudentResponse>>();
		 	structure.setStatus(HttpStatus.CREATED.value());
		 	structure.setMessage("Data saved successfully");
		 	structure.setData(studentResponses);
		 	
		 	return new ResponseEntity<ResponseStructure<List<StudentResponse>>>(structure,HttpStatus.CREATED);
		 
	}

	@Override
	public ResponseEntity<String> writeToCsv(String filePath) throws IOException {
		List<Student> students = repo.findAll();
		
		CSVPrinter csvPrinter = new CSVPrinter(new FileWriter(filePath), CSVFormat.DEFAULT);
		csvPrinter.printRecord("studentId", "studentName", "studentPhNo", "studentPassword", "studentEmail", "studentGrade");
		csvPrinter.println();
		
		for (Student student : students)
		{
			csvPrinter.printRecord(student.getStudentId(), student.getStudentName(), student.getStudentPhno(),
					student.getStudentPassword(), student.getStudentEmail(), student.getStudentGrade());
		}
		
		csvPrinter.flush();
		return new ResponseEntity<String> ("Data transfered to CSV File !!", HttpStatus.OK);
	}
 

	 

}




//case2-> send the data from csv file to database
//<group id>org.apache.commons</groupid>
//<artifactid> Commons-csv<artifactid>
//version-1.8
